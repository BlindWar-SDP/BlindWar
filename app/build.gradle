plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'jacoco'
    id 'com.google.gms.google-services'
    id 'kotlin-kapt'
    id 'org.jetbrains.kotlin.plugin.serialization'
}

jacoco {
    toolVersion = "0.8.7"
}

configurations.all{
    resolutionStrategy {
        eachDependency { details ->
            if ('org.jacoco' == details.requested.group) {
                details.useVersion "0.8.7"
            }
        }
    }
}


android {
    compileSdk 31

    defaultConfig {
        applicationId "ch.epfl.sdp.blindwar"
        minSdk 23
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            testCoverageEnabled true
        }
        debug {
            testCoverageEnabled true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    testOptions {
        animationsDisabled = true
    }
    compileSdkVersion 31
    buildToolsVersion '31.0.0'
}

dependencies {
    implementation "com.google.code.gson:gson:2.8.9"
    def lifecycle_version = "2.5.0-beta01"
    def arch_version = "2.1.0"

    implementation 'com.spotify.android:auth:1.2.5'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.fragment:fragment-ktx:1.5.0-beta01@aar'
    androidTestImplementation 'androidx.fragment:fragment-ktx:1.5.0-beta01@aar'
    implementation 'androidx.activity:activity-ktx:1.6.0-alpha01@aar'
    androidTestImplementation 'androidx.activity:activity-ktx:1.6.0-alpha01@aar'

    // ViewModel
    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version")
    // ViewModel utilities for Compose
    implementation("androidx.lifecycle:lifecycle-viewmodel-compose:$lifecycle_version")
    // LiveData
    implementation("androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version")
    // Lifecycles only (without ViewModel or LiveData)
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version")

    // Saved state module for ViewModel
    implementation("androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version")

    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation("androidx.lifecycle:lifecycle-common-java8:$lifecycle_version")

    // optional - helpers for implementing LifecycleOwner in a Service
    implementation("androidx.lifecycle:lifecycle-service:$lifecycle_version")

    // optional - ProcessLifecycleOwner provides a lifecycle for the whole application process
    implementation("androidx.lifecycle:lifecycle-process:$lifecycle_version")

    // optional - ReactiveStreams support for LiveData
    implementation("androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycle_version")

    // optional - Test helpers for LiveData
    testImplementation("androidx.arch.core:core-testing:$arch_version")


    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'androidx.test:monitor:1.5.0'
    implementation 'com.squareup.picasso:picasso:2.8'
    implementation 'com.google.firebase:firebase-database:20.0.4'
    implementation 'com.google.firebase:firebase-database-ktx:20.0.4'
    implementation 'com.airbnb.android:lottie:5.0.3'

    // ViewModel
    //implementation 'androidx.fragment:fragment-ktx:1.5.0-alpha03@aar'
    //testImplementation 'androidx.fragment:fragment-ktx:1.5.0-alpha03@aar'
    //androidTestImplementation 'androidx.fragment:fragment-ktx:1.5.0-alpha03@aar'

    // Network
    implementation 'com.squareup.retrofit2:retrofit:2.7.1'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.9.3'
    implementation 'com.google.firebase:firebase-storage-ktx:20.0.1'
    androidTestImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'com.squareup.okhttp3:mockwebserver:4.9.3'
    implementation 'com.squareup.okhttp3:okhttp:4.9.3'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.3'

    implementation 'net.java.dev.jna:jna:5.8.0@aar'
    implementation 'io.github.gautamchibde:audiovisualizer:2.2.5'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'org.jacoco:org.jacoco.ant:0.8.7'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.4.0'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation('com.adevinta.android:barista:4.1.0') {
        exclude group: 'org.jetbrains.kotlin' // Only if you already use Kotlin in your project

    // Firebase
    implementation 'com.google.firebase:firebase-auth-ktx:21.0.2'
    implementation 'com.google.android.gms:play-services-auth:20.1.0'
    implementation 'com.firebaseui:firebase-ui-auth:8.0.0'
    implementation 'com.google.firebase:firebase-database:19.2.1'
    implementation 'com.google.firebase:firebase-database-ktx:20.0.4'
    implementation 'com.google.firebase:firebase-firestore-ktx:24.0.2'
    implementation platform('com.google.firebase:firebase-bom:29.0.1')
    implementation 'com.google.firebase:firebase-firestore-ktx'
    implementation 'com.firebaseui:firebase-ui-storage:7.2.0'
    // Glide
    implementation 'com.github.bumptech.glide:glide:4.13.0'
    kapt 'com.github.bumptech.glide:compiler:4.13.0'
    }

    // Firebase
    implementation 'com.google.firebase:firebase-auth-ktx:21.0.3'
    implementation 'com.google.android.gms:play-services-auth:20.1.0'
    implementation 'com.firebaseui:firebase-ui-auth:8.0.0'
    implementation 'com.google.firebase:firebase-firestore-ktx:24.1.1'
    implementation 'com.google.firebase:firebase-database:20.0.4'
    implementation 'com.google.firebase:firebase-database-ktx:20.0.4'

    debugImplementation("androidx.fragment:fragment-testing:1.4.1")
    debugImplementation("androidx.fragment:fragment-ktx:1.5.0-beta01")
    debugImplementation("androidx.test:core:1.4.0")

    // JVM-based unit tests (that don't need a real device or emulator)
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.0"
    // Instrumentation unit tests (that will require a real device or emulator)
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.0"
    // Coroutines, and the much-recommended library to add lifecycle-awareness to coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.0"

    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.4.1'
    androidTestImplementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.4.1'

    // Serialization
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.2.2"
    implementation 'com.google.code.gson:gson:2.8.9'



}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    reports {
        xml.required = true
        html.required = true
    }

    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            // Exclude Hilt generated classes
            '**/*Hilt*.*',
            'hilt_aggregated_deps/**',
            '**/*_Factory.class',
            '**/*_MembersInjector.class',
            // Temporary
            '**/UserNewInfoActivity.**/',
            '**/RemoteMusicMetadataSource.**',
            '**/MusicMetadataRepository.**',
            '**/MockMusicdataSource.**',
            '**/data/spotify/**',
            '**/database/**'
    ]

    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: project.buildDir, includes:
            ['outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec',
             'outputs/code_coverage/debugAndroidTest/connected/*coverage.ec']))

}

connectedCheck {
    finalizedBy jacocoTestReport
}
